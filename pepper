#!/usr/bin/env bash
#
# A modular color-scheme manager for unix systems
#
# Created by Joshua L Ervin @ University of Washington
# Contact: jlervin@posteo.net

COLOR_SCHEME="${1}"
SQUASH_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)"
NEWLINE=$'\n'

source "${SQUASH_DIR}/defaults"

usage()
{
    printf "Welcome to squash!${NEWLINE}"
}

# if using squash as backend
if [[ ! -f ${THEME_DIR}/${COLOR_SCHEME} ]]; then
    printf "Error: colorscheme not found${NEWLINE}"
    printf "Exiting squash${NEWLINE}"
    exit 0
fi

source "${THEME_DIR}/${COLOR_SCHEME}"

COLOR_ARRAY=($BLK  $RED  $GRN  $YLW  $BLU  $MAG  $CYN  $WHT \
             $BBLK $BRED $BGRN $BYLW $BBLU $BMAG $BCYN $BWHT\
             $BG $FG)

write_x() 
{
   local x_output=""
   local x_output+="*.foreground:   ${FG}${NEWLINE}"
   local x_output+="*.background:   ${BG}${NEWLINE}"
   local x_output+="*.cursorColor:  ${FG}${NEWLINE}"

   for i in {0..15}; do
      local x_output+="*.color${i}: ${COLOR_ARRAY[${i}]}${NEWLINE}"
   done

   local rofi_output=""
   local rofi_output+="rofi.color-enaled: true${NEWLINE}"
   local rofi_output+="rofi.color-window: ${BLK}, ${BLK}, ${BLK}${NEWLINE}"
   local rofi_output+="rofi.color-normal: ${BLK}, ${FG}, ${BLK}, ${BBLK}, ${ACC}${NEWLINE}"

   local twobwm_output=""
   local twobwm_output+="twobwm.focus_color: ${TWOBWM_FOCUS}${NEWLINE}"
   local twobwm_output+="twobwm.unfocus_color: ${TWOBWM_FOCUS}${NEWLINE}"
   local twobwm_output+="twobwm.fixed_color: ${TWOBWM_FIXED}${NEWLINE}"
   local twobwm_output+="twobwm.unkill_color: ${TWOBWM_UNKILL}${NEWLINE}"
   local twobwm_output+="twobwm.outer_border_color: ${TWOBWM_OUTR}${NEWLINE}"
   local twobwm_output+="twobwm.fixed_unkill_color: ${TWOBWM_UNKILL}${NEWLINE}"

   if [[ $SQUASH_FONT ]]; then
       local x_output+="URxvt*font:${SQUASH_FONT}${NEWLINE}"
       local x_output+="URxvt*boldFont:${SQUASH_FONT}${NEWLINE}"
   fi

   local output="${x_output}${rofi_output}${twobwm_output}"
   printf "${output}" > "${CACHE_DIR}/x_colors"
}

# Writes a css file that contains all the color information of the current theme
# to the ${CACHE_DIR}. Can be sourced by any number of applicatons. 
# Globals:
#   CACHE_DIR
write_css() 
{
   local css_output=""
   local css_output+=":root {${NEWLINE}"
   local css_output+="\t--wallpaper: url("${wallpaper}");${NEWLINE}"
   local css_output+="\t--background: ${BG};${NEWLINE}"
   local css_output+="\t--foreground: ${FG};${NEWLINE}"
   for i in {0..15}; do 
       local css_output+="\t--color${i}: ${COLOR_ARRAY[${i}]};${NEWLINE}"
   done
   local css_output+="}"

   printf "${css_output}" > "${CACHE_DIR}/colors.css"
}

# Copies the current bash script to the ${CACHE_DIR} so that it can be sourced by any applications
# that want access to the variables in the bash script
# Globals:
#   CACHE_DIR
write_sh() 
{
    rm -f ${CACHE_DIR}/colors
    cp ${THEME_DIR}/${COLOR_SCHEME} ${CACHE_DIR}/colors
}

update_vim()
{
    sed -i -e "s/colorscheme .*/colorscheme $VIM_SCHEME/g" $VIM_CONFIG
    reload_nvim
}

# Write all files
# Don't know why anyone wound't want to do this
test ${WRITE_ALL} && write_x
test ${WRITE_ALL} && write_sh
test ${WRITE_ALL} && write_css

test ${RELOAD_TERMINALS} && reload_terminals ${COLOR_ARRAY[@]}
test ${RELOAD_BAR}  && reload_bar ${BAR_SCRIPT}
test ${RELOAD_WM} && reload_wm
test ${RELOAD_VIM} && update_vim
test ${RELOAD_DUNST} && reload_dunst ${DUNST_PATH} ${BLK} ${FG}
test ${RELOAD_WALLPAPER} && reload_wallpaper ${WALLPAPER_PATH} ${WALLPAPER_STYLE}
